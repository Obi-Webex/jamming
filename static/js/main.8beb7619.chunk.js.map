{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","util/Spotify.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","handleOnClick","bind","handleOnChange","renderButton","this","token","getSearchResults","searchTerm","getToken","e","updateSearchTerm","target","value","onClick","className","onChange","placeholder","React","Component","Track","handleAddTrack","handleRemoveTrack","addTrack","track","removeTrack","isPlaylist","name","artist","album","renderAction","TrackList","tracklist","tracks","map","key","id","SearchResults","Playlist","onNameUpdate","savePlaylist","playlistName","playlist","Spotify","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","items","uri","artists","save","method","body","JSON","stringify","public","uris","catch","error","console","getAccessToken","tokenFromURL","window","location","href","match","url","App","updatePlaylistName","history","pushState","state","searchResults","accessToken","newPlaylist","find","savedTrack","push","setState","filter","alert","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8beb7619.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\n//Displays the searchbar at the top.\r\n//The \"button\" (it's not a button) will display a log in prompt instead of search if there is no access token.\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.renderButton = this.renderButton.bind(this);\r\n  }\r\n\r\n  handleOnClick() {\r\n    if (this.props.token) {\r\n      this.props.getSearchResults(this.props.searchTerm);\r\n    } else {\r\n      this.props.getToken();\r\n    }\r\n  }\r\n\r\n  handleOnChange(e) {\r\n    this.props.updateSearchTerm(e.target.value);\r\n  }\r\n\r\n  renderButton() {\r\n    if (this.props.token) {\r\n      return <a onClick={this.handleOnClick}>SEARCH</a>;\r\n    } else {\r\n      return <a onClick={this.handleOnClick}>LOG IN TO SPOTIFY</a>;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='SearchBar'>\r\n        <div className='SearchBar-input'>\r\n          <input\r\n            onChange={this.handleOnChange}\r\n            placeholder='Search by artist, title or album'\r\n          />\r\n        </div>\r\n        <div className='SearchBar-submit'>{this.renderButton()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\n//This is the logic for every track. If it's in a playlist determines if it has a + or a - next to it to add\r\n//the song or remove it from the parent TrackList component.\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAddTrack = this.handleAddTrack.bind(this);\r\n    this.handleRemoveTrack = this.handleRemoveTrack.bind(this);\r\n  }\r\n\r\n  handleAddTrack() {\r\n    this.props.addTrack(this.props.track);\r\n  }\r\n\r\n  handleRemoveTrack() {\r\n    this.props.removeTrack(this.props.track);\r\n  }\r\n\r\n  renderAction() {\r\n    return this.props.isPlaylist ? (\r\n      <a className='Track-action' onClick={this.handleRemoveTrack}>\r\n        -\r\n      </a>\r\n    ) : (\r\n      <a className='Track-action' onClick={this.handleAddTrack}>\r\n        +\r\n      </a>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='Track'>\r\n        <div className='Track-information'>\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>\r\n            {this.props.track.artist} | {this.props.track.album}\r\n          </p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from \"react\";\r\nimport \"./TrackList.css\";\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    let tracklist;\r\n    if (this.props.isPlaylist) {\r\n      tracklist = this.props.tracks.map((track) => {\r\n        return (\r\n          <Track\r\n            track={track}\r\n            key={track.id}\r\n            isPlaylist={this.props.isPlaylist}\r\n            removeTrack={this.props.removeTrack}\r\n          />\r\n        );\r\n      });\r\n    } else {\r\n      tracklist = this.props.tracks.map((track) => {\r\n        return (\r\n          <Track\r\n            track={track}\r\n            key={track.id}\r\n            isPlaylist={this.props.isPlaylist}\r\n            addTrack={this.props.addTrack}\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    return <div className='TrackList'>{tracklist}</div>;\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\nimport \"../TrackList/TrackList\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\n//Displays all the search results.\r\n//Because Track components are either in search results or in a playlist, and that differentiates their functionality\r\n//I pass the \"isPlaylist\" prop into every TrackList so the tracks within it know where they are.\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='SearchResults'>\r\n        <h2>Results</h2>\r\n        <br />\r\n        <TrackList\r\n          tracks={this.props.tracks}\r\n          isPlaylist={false}\r\n          addTrack={this.props.addTrack}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\nimport \"./Playlist.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\n//Handles how we render the playlist\r\n//Because Track components are either in search results or in a playlist, and that differentiates their functionality\r\n//I pass the \"isPlaylist\" prop into every TrackList so the tracks within it know where they are.\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n  }\r\n\r\n  handleOnChange(e) {\r\n    this.props.onNameUpdate(e.target.value);\r\n  }\r\n\r\n  handleOnClick() {\r\n    this.props.savePlaylist();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='Playlist'>\r\n        <input\r\n          placeholder='New Playlist'\r\n          value={this.props.playlistName}\r\n          onChange={this.handleOnChange}\r\n        />\r\n        <TrackList\r\n          tracks={this.props.playlist}\r\n          isPlaylist={true}\r\n          removeTrack={this.props.removeTrack}\r\n        />\r\n        <a className='Playlist-save' onClick={this.handleOnClick}>\r\n          SAVE TO SPOTIFY\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","const clientID = \"7f5b8e3693e14d378aa55bbf02d5a91a\";\r\nconst redirectURI = \"http://localhost:3000/\";\r\n\r\n// Contains all the functions I need for accessing the Spotify API\r\n\r\nconst Spotify = {\r\n  search(term, token) {\r\n    return fetch(\r\n      `https://api.spotify.com/v1/search?q=${term}&type=track&limit=10`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (jsonResponse.tracks.items) {\r\n          return jsonResponse.tracks.items.map((track) => ({\r\n            id: track.uri,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n          }));\r\n        }\r\n      });\r\n  },\r\n\r\n  save(name, token, playlist) {\r\n    return fetch(`https://api.spotify.com/v1/me`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        return jsonResponse.id;\r\n      })\r\n      .then((id) => {\r\n        return fetch(`https://api.spotify.com/v1/users/${id}/playlists`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            name: name,\r\n            public: false,\r\n          }),\r\n        });\r\n      })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        return jsonResponse.id;\r\n      })\r\n      .then((id) => {\r\n        return fetch(`https://api.spotify.com/v1/playlists/${id}/tracks`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            uris: playlist,\r\n          }),\r\n        });\r\n      })\r\n      .catch((error) => console.error(\"Error: \", error));\r\n  },\r\n\r\n  getAccessToken() {\r\n    debugger;\r\n    const tokenFromURL = window.location.href.match(/access_token=([^&]*)/);\r\n    if (tokenFromURL) {\r\n      return tokenFromURL[1];\r\n    } else {\r\n      const url = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-private&redirect_uri=${redirectURI}`;\r\n      window.location = url;\r\n    }\r\n  },\r\n};\r\n\r\nexport default Spotify;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\n\n/*To all who dare tread these hallowed grounds:\nI'm sorry this is all a mess and doesn't make sense. Somehow, it all works.\nI promise I'll learn more and get better at this as I practice and learn.\nBut for now, you're stuck trying to decypher what I've done here.\nGodspeed.\n*/\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getSearchResults = this.getSearchResults.bind(this);\n    this.updateSearchTerm = this.updateSearchTerm.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    //Because we're using the implicit login flow from Spotify, the section below checks if we've been redirected back to our app and grabs the token.\n    const tokenFromURL = window.location.href.match(/access_token=([^&]*)/);\n    if (tokenFromURL !== null) {\n      window.history.pushState(\"test\", \"Title\", \"http://localhost:3000\");\n      this.state = {\n        searchResults: [],\n        playlist: [],\n        playlistName: \"\",\n        accessToken: tokenFromURL[1],\n        searchTerm: \"\",\n      };\n    } else {\n      this.state = {\n        searchResults: [],\n        playlist: [],\n        playlistName: \"\",\n        accessToken: \"\",\n        searchTerm: \"\",\n      };\n    }\n  }\n\n  addTrack(track) {\n    let newPlaylist = this.state.playlist;\n    if (newPlaylist.find((savedTrack) => savedTrack.id === track.id)) {\n      return;\n    }\n    newPlaylist.push(track);\n    this.setState({ playlist: newPlaylist });\n  }\n  removeTrack(track) {\n    let newPlaylist = [];\n    newPlaylist = this.state.playlist.filter((savedTrack) => {\n      return savedTrack.id !== track.id;\n    });\n    this.setState({ playlist: newPlaylist });\n  }\n\n  savePlaylist() {\n    Spotify.save(\n      this.state.playlistName,\n      this.state.accessToken,\n      this.state.playlist.map((track) => {\n        return track.id;\n      })\n    );\n    alert(\"Playlist succesfully saved\");\n    this.setState({ playlist: [], playlistName: \"\" });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  updateSearchTerm(term) {\n    this.setState({ searchTerm: term });\n  }\n\n  getAccessToken() {\n    this.setState({ accessToken: Spotify.getAccessToken() });\n  }\n\n  getSearchResults(term) {\n    Spotify.search(term, this.state.accessToken).then((tracks) => {\n      this.setState({ searchResults: tracks });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className='highlight'>mmm</span>ing\n        </h1>\n        <div className='App'>\n          <SearchBar\n            getToken={this.getAccessToken}\n            token={this.state.accessToken}\n            getSearchResults={this.getSearchResults}\n            searchTerm={this.state.searchTerm}\n            updateSearchTerm={this.updateSearchTerm}\n          />\n          <div className='App-playlist'>\n            <SearchResults\n              tracks={this.state.searchResults}\n              addTrack={this.addTrack}\n            />\n            <Playlist\n              playlist={this.state.playlist}\n              playlistName={this.state.playlistName}\n              removeTrack={this.removeTrack}\n              onNameUpdate={this.updatePlaylistName}\n              savePlaylist={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}